// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Business {
  id        Int      @id @default(autoincrement())
  name String
  reviews Review[]
  dishes Dish[]
  //address String //I'm not sure the best way to store locations right now
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String
  password String
  reviews   Review[]
  dishRestrictionReviews DishRestrictionReview[]
}

model Review {
  id Int @id @default(autoincrement())
  authorID Int
  author User @relation(fields:[authorID], references:[id])
  businessID Int
  business Business @relation(fields:[businessID], references:[id])
  title String
  content String
  numStars Int
}

model DietaryRestriction {
  id Int @id @default(autoincrement())
  name String @unique
}

model Dish {
  id Int @id @default(autoincrement())
  name String
  businessID Int
  business Business @relation(fields: [businessID], references: [id])
  dishRestrictionReviews DishRestrictionReview[]
}

model DishRestrictionReview {
  id Int @id @default(autoincrement())
  userID Int
  user User @relation(fields: [userID], references: [id])
  dishID Int
  dish Dish @relation(fields: [dishID], references: [id])
  dishSatisfiesRestriction Boolean
  @@unique([userID, dishID]) // each user can only review each dish once (i.e. edit review rather than making new one)
}
